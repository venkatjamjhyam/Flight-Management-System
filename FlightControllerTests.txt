package com.example.flightmanagement;

import com.example.flightmanagement.model.Flight;
import com.example.flightmanagement.service.FlightService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Optional;

import static org.hamcrest.Matchers.is;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest
public class FlightControllerTests {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private FlightService flightService;

    private Flight flight1;
    private Flight flight2;
   

    @BeforeEach
    public void setup() {
        flight1 = new Flight();
        flight1.setId(1L);
        flight1.setFlightNumber("AA123");
        flight1.setOrigin("New York");
        flight1.setDestination("Los Angeles");
        flight1.setDepartureTime(LocalDateTime.of(2024, 7, 19, 15, 0));
        flight1.setArrivalTime(LocalDateTime.of(2024, 7, 19, 18, 0));

        flight2 = new Flight();
        flight2.setId(2L);
        flight2.setFlightNumber("BA456");
        flight2.setOrigin("London");
        flight2.setDestination("New York");
        flight2.setDepartureTime(LocalDateTime.of(2024, 7, 20, 10, 0));
        flight2.setArrivalTime(LocalDateTime.of(2024, 7, 20, 13, 0));
        
        
        
    }

    @Test
    public void testGetAllFlights() throws Exception {
        Mockito.when(flightService.getAllFlights()).thenReturn(Arrays.asList(flight1, flight2));

        mockMvc.perform(MockMvcRequestBuilders.get("/api/flights")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].flightNumber", is(flight1.getFlightNumber())))
                .andExpect(jsonPath("$[1].flightNumber", is(flight2.getFlightNumber())));
           }

    @Test
    public void testGetFlightById() throws Exception {
        Mockito.when(flightService.getFlightById(1L)).thenReturn(Optional.of(flight1));

        mockMvc.perform(MockMvcRequestBuilders.get("/api/flights/1")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.flightNumber", is(flight1.getFlightNumber())));
    }

    @Test
    public void testCreateFlight() throws Exception {
        Mockito.when(flightService.saveFlight(Mockito.any(Flight.class))).thenReturn(flight1);

        String flightJson = "{ \"flightNumber\": \"AA123\", \"origin\": \"New York\", \"destination\": \"Los Angeles\", \"departureTime\": \"2024-07-19T15:00:00\", \"arrivalTime\": \"2024-07-19T18:00:00\" }";

        mockMvc.perform(MockMvcRequestBuilders.post("/api/flights")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(flightJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.flightNumber", is(flight1.getFlightNumber())));
    }

    @Test
    public void testUpdateFlight() throws Exception {
        Mockito.when(flightService.getFlightById(1L)).thenReturn(Optional.of(flight1));
        Mockito.when(flightService.saveFlight(Mockito.any(Flight.class))).thenReturn(flight1);

        String flightJson = "{ \"flightNumber\": \"AA123\", \"origin\": \"New York\", \"destination\": \"Los Angeles\", \"departureTime\": \"2024-07-19T15:00:00\", \"arrivalTime\": \"2024-07-19T18:00:00\" }";

        mockMvc.perform(MockMvcRequestBuilders.put("/api/flights/1")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(flightJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.flightNumber", is(flight1.getFlightNumber())));
    }

    @Test
    public void testDeleteFlight() throws Exception {
        Mockito.when(flightService.getFlightById(1L)).thenReturn(Optional.of(flight1));

        mockMvc.perform(MockMvcRequestBuilders.delete("/api/flights/1")
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());
    }
}
